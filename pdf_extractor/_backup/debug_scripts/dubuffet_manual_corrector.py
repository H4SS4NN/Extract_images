#!/usr/bin/env python3
"""
Correcteur manuel interactif pour les extractions Dubuffet
Permet de corriger manuellement les erreurs de num√©rotation
"""

import os
import json
import cv2
import numpy as np
from pathlib import Path
from typing import Dict, List, Tuple, Optional
import sys

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent.parent))

from utils import logger

class DubuffetManualCorrector:
    """
    Correcteur manuel interactif pour les extractions Dubuffet
    """
    
    def __init__(self):
        self.logger = logger
        
    def interactive_correction_session(self, extraction_dir: str):
        """
        Session de correction interactive
        """
        extraction_path = Path(extraction_dir)
        if not extraction_path.exists():
            print(f"‚ùå R√©pertoire non trouv√©: {extraction_dir}")
            return
        
        print(f"üé® SESSION DE CORRECTION DUBUFFET")
        print(f"üìÅ R√©pertoire: {extraction_path.name}")
        print("=" * 60)
        
        corrections_made = []
        
        # Parcourir chaque page
        for page_dir in sorted(extraction_path.glob('page_*')):
            if page_dir.is_dir():
                page_corrections = self._correct_page_interactive(page_dir)
                corrections_made.extend(page_corrections)
        
        # Sauvegarder les corrections
        if corrections_made:
            self._save_corrections(extraction_path, corrections_made)
            print(f"\n‚úÖ {len(corrections_made)} corrections appliqu√©es et sauvegard√©es")
        else:
            print(f"\nüìã Aucune correction n√©cessaire")
    
    def _correct_page_interactive(self, page_dir: Path) -> List[Dict]:
        """
        Correction interactive d'une page
        """
        page_num = int(page_dir.name.split('_')[1])
        print(f"\nüìÑ PAGE {page_num}")
        print("-" * 30)
        
        # Lire le JSON de d√©tails
        json_file = page_dir / 'page_ultra_details.json'
        if not json_file.exists():
            print(f"‚ùå JSON non trouv√© pour la page {page_num}")
            return []
        
        with open(json_file, 'r', encoding='utf-8') as f:
            page_data = json.load(f)
        
        rectangles = page_data.get('rectangles_details', [])
        if not rectangles:
            print(f"üì≠ Aucune image d√©tect√©e sur la page {page_num}")
            return []
        
        corrections = []
        
        # Afficher les d√©tections actuelles
        print(f"üîç Images d√©tect√©es sur la page {page_num}:")
        for i, rect in enumerate(rectangles, 1):
            filename = rect.get('filename', 'N/A')
            number = rect.get('artwork_number', 'N/A')
            method = rect.get('detection_method', 'N/A')
            confidence = rect.get('confidence', 0)
            
            print(f"   {i}. {filename} ‚Üí Num√©ro: {number} (confiance: {confidence:.2f}, m√©thode: {method})")
        
        # D√©tecter les probl√®mes √©vidents
        detected_numbers = [rect.get('artwork_number') for rect in rectangles if rect.get('artwork_number')]
        number_counts = {}
        for num in detected_numbers:
            number_counts[num] = number_counts.get(num, 0) + 1
        
        # Signaler les duplicatas
        duplicates = [num for num, count in number_counts.items() if count > 1]
        if duplicates:
            print(f"‚ö†Ô∏è  Duplicatas d√©tect√©s: {duplicates}")
        
        # Demander s'il y a des corrections √† faire
        while True:
            response = input(f"\n‚ùì Y a-t-il des erreurs √† corriger sur la page {page_num} ? (o/n/details): ").strip().lower()
            
            if response in ['n', 'non', 'no']:
                break
            elif response in ['d', 'details']:
                self._show_page_details(page_dir, rectangles)
                continue
            elif response in ['o', 'oui', 'y', 'yes']:
                page_corrections = self._make_corrections_for_page(page_dir, rectangles)
                corrections.extend(page_corrections)
                break
            else:
                print("R√©ponse non reconnue. Tapez 'o' pour oui, 'n' pour non, ou 'details' pour plus d'infos.")
        
        return corrections
    
    def _show_page_details(self, page_dir: Path, rectangles: List[Dict]):
        """
        Affiche les d√©tails d'une page
        """
        print(f"\nüìã D√âTAILS DE LA PAGE {page_dir.name}")
        print("-" * 40)
        
        # V√©rifier si l'image compl√®te existe
        full_image_path = page_dir / 'page_full_image.jpg'
        if full_image_path.exists():
            print(f"üñºÔ∏è  Image compl√®te: {full_image_path.name}")
        
        # Lister tous les fichiers d'images
        image_files = list(page_dir.glob('*.png'))
        print(f"üì∏ Images extraites: {len(image_files)}")
        for img_file in image_files:
            size_mb = img_file.stat().st_size / (1024 * 1024)
            print(f"   - {img_file.name} ({size_mb:.1f} MB)")
        
        # Afficher les bounding boxes
        print(f"\nüìê Bounding boxes:")
        for i, rect in enumerate(rectangles, 1):
            bbox = rect.get('bbox', {})
            x, y, w, h = bbox.get('x', 0), bbox.get('y', 0), bbox.get('w', 0), bbox.get('h', 0)
            print(f"   {i}. {rect.get('filename')}: x={x}, y={y}, w={w}, h={h}")
    
    def _make_corrections_for_page(self, page_dir: Path, rectangles: List[Dict]) -> List[Dict]:
        """
        Effectue les corrections pour une page
        """
        corrections = []
        page_num = int(page_dir.name.split('_')[1])
        
        print(f"\nüîß CORRECTION DE LA PAGE {page_num}")
        print("Tapez le num√©ro de l'image √† corriger, ou 'fin' pour terminer")
        
        while True:
            # Afficher la liste des images
            print(f"\nüìã Images disponibles:")
            for i, rect in enumerate(rectangles, 1):
                filename = rect.get('filename', 'N/A')
                number = rect.get('artwork_number', 'N/A')
                print(f"   {i}. {filename} ‚Üí {number}")
            
            choice = input(f"\nüéØ Quelle image corriger (1-{len(rectangles)}) ou 'fin' ? ").strip()
            
            if choice.lower() in ['fin', 'exit', 'quit']:
                break
            
            try:
                img_index = int(choice) - 1
                if 0 <= img_index < len(rectangles):
                    correction = self._correct_single_image(rectangles[img_index], page_num)
                    if correction:
                        corrections.append(correction)
                        # Mettre √† jour le rectangle dans la liste
                        rectangles[img_index]['artwork_number'] = correction['new_number']
                        print(f"‚úÖ Correction appliqu√©e: {correction['old_number']} ‚Üí {correction['new_number']}")
                else:
                    print(f"‚ùå Index invalide. Choisissez entre 1 et {len(rectangles)}")
            except ValueError:
                print("‚ùå Veuillez entrer un num√©ro valide ou 'fin'")
        
        return corrections
    
    def _correct_single_image(self, rectangle: Dict, page_num: int) -> Optional[Dict]:
        """
        Corrige une image individuelle
        """
        filename = rectangle.get('filename', 'N/A')
        old_number = rectangle.get('artwork_number', 'N/A')
        
        print(f"\nüéØ CORRECTION DE {filename}")
        print(f"   Num√©ro actuel: {old_number}")
        
        new_number = input(f"   Nouveau num√©ro (ou Entr√©e pour annuler): ").strip()
        
        if not new_number:
            print("   Correction annul√©e")
            return None
        
        if new_number == old_number:
            print("   Aucun changement")
            return None
        
        # Valider le nouveau num√©ro
        if not new_number.isdigit():
            print("   ‚ùå Le num√©ro doit √™tre un nombre")
            return None
        
        reason = input(f"   Raison de la correction (optionnel): ").strip()
        if not reason:
            reason = f"Correction manuelle: {old_number} ‚Üí {new_number}"
        
        return {
            'page': page_num,
            'filename': filename,
            'rectangle_id': rectangle.get('rectangle_id'),
            'old_number': old_number,
            'new_number': new_number,
            'reason': reason,
            'correction_type': 'manual'
        }
    
    def _save_corrections(self, extraction_path: Path, corrections: List[Dict]):
        """
        Sauvegarde les corrections appliqu√©es
        """
        # Sauvegarder le fichier de corrections
        corrections_file = extraction_path / 'manual_corrections.json'
        corrections_data = {
            'correction_date': str(np.datetime64('now')),
            'total_corrections': len(corrections),
            'corrections': corrections
        }
        
        with open(corrections_file, 'w', encoding='utf-8') as f:
            json.dump(corrections_data, f, indent=2, ensure_ascii=False)
        
        print(f"üìÅ Corrections sauvegard√©es: {corrections_file}")
        
        # Appliquer les corrections aux fichiers JSON de chaque page
        for correction in corrections:
            page_num = correction['page']
            page_dir = extraction_path / f'page_{page_num:03d}'
            json_file = page_dir / 'page_ultra_details.json'
            
            if json_file.exists():
                with open(json_file, 'r', encoding='utf-8') as f:
                    page_data = json.load(f)
                
                # Trouver et modifier le rectangle correspondant
                rectangles = page_data.get('rectangles_details', [])
                for rect in rectangles:
                    if (rect.get('rectangle_id') == correction['rectangle_id'] or 
                        rect.get('filename') == correction['filename']):
                        rect['artwork_number'] = correction['new_number']
                        rect['manually_corrected'] = True
                        rect['correction_reason'] = correction['reason']
                        break
                
                # Sauvegarder le JSON modifi√©
                with open(json_file, 'w', encoding='utf-8') as f:
                    json.dump(page_data, f, indent=2, ensure_ascii=False)
                
                print(f"üìù Page {page_num} mise √† jour")
    
    def create_corrected_dubuffet_json(self, extraction_dir: str) -> Dict:
        """
        Cr√©e le JSON final Dubuffet avec toutes les corrections appliqu√©es
        """
        extraction_path = Path(extraction_dir)
        
        artworks = {}
        total_pages = 0
        total_corrections = 0
        
        # Parcourir toutes les pages
        for page_dir in extraction_path.glob('page_*'):
            if page_dir.is_dir():
                page_num = int(page_dir.name.split('_')[1])
                total_pages += 1
                
                json_file = page_dir / 'page_ultra_details.json'
                if json_file.exists():
                    with open(json_file, 'r', encoding='utf-8') as f:
                        page_data = json.load(f)
                    
                    for rect in page_data.get('rectangles_details', []):
                        number = rect.get('artwork_number')
                        if number:
                            # Compter les corrections
                            if rect.get('manually_corrected'):
                                total_corrections += 1
                            
                            artworks[number] = {
                                'number': number,
                                'title': f"HERBAGES AU CORBEAU {number}" if number in ['2', '3'] else f"≈íUVRE {number}",
                                'technique': 'huile sur toile',
                                'dimensions': 'dimensions √† pr√©ciser',
                                'date': 'octobre 1952',
                                'page': page_num,
                                'filename': rect.get('filename'),
                                'thumbnail': rect.get('thumbnail'),
                                'bbox': rect.get('bbox'),
                                'confidence': rect.get('confidence'),
                                'detection_method': rect.get('detection_method'),
                                'collection': 'Dubuffet',
                                'manually_corrected': rect.get('manually_corrected', False),
                                'correction_reason': rect.get('correction_reason', '')
                            }
        
        return {
            'collection': 'Jean Dubuffet - Lieux momentan√©s',
            'extraction_date': str(np.datetime64('now')),
            'total_artworks': len(artworks),
            'total_pages_processed': total_pages,
            'manual_corrections_applied': total_corrections,
            'artworks': artworks,
            'notes': 'JSON g√©n√©r√© apr√®s corrections manuelles interactives'
        }


def main():
    """Fonction principale"""
    print("‚úèÔ∏è CORRECTEUR MANUEL DUBUFFET")
    print("=" * 50)
    
    corrector = DubuffetManualCorrector()
    
    extraction_dir = input("üìÅ Chemin du r√©pertoire d'extraction: ").strip()
    
    if not extraction_dir:
        extraction_dir = "extractions_ultra/DUBUFFET-JEAN_LIEUX-MOMENTANES-PATES-BATTUES-VIII_ULTRA_20250910_142409"
    
    if not os.path.exists(extraction_dir):
        print(f"‚ùå R√©pertoire non trouv√©: {extraction_dir}")
        return
    
    # Session de correction interactive
    corrector.interactive_correction_session(extraction_dir)
    
    # G√©n√©rer le JSON final corrig√©
    print(f"\nüìù G√©n√©ration du JSON final corrig√©...")
    final_json = corrector.create_corrected_dubuffet_json(extraction_dir)
    
    # Sauvegarder
    output_file = Path(extraction_dir) / 'dubuffet_final_corrected.json'
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(final_json, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ JSON final sauvegard√©: {output_file}")
    print(f"üìä {final_json['total_artworks']} ≈ìuvres, {final_json['manual_corrections_applied']} corrections appliqu√©es")


if __name__ == "__main__":
    main()
