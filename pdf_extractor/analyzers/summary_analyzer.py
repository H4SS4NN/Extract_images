#!/usr/bin/env python3
"""
Analyseur de sommaires pour catalogues d'art
Utilise Mistral pour extraire et structurer les informations d'≈ìuvres
"""

import json
import re
import logging
import requests
import os
from typing import Dict, List, Optional, Tuple
import cv2
import numpy as np
import pytesseract

logger = logging.getLogger(__name__)

class SummaryAnalyzer:
    """Analyseur de sommaires pour extraire les informations d'≈ìuvres d'art"""
    
    def __init__(self, ollama_url: str = "http://localhost:11434", mistral_model: str = "mistral"):
        self.ollama_url = ollama_url
        self.mistral_model = mistral_model
        self.mistral_enabled = self._check_mistral_availability()
        
        # Configuration pour la d√©tection des sommaires
        self.summary_patterns = [
            r"sommaire",
            r"table\s+des\s+mati√®res",
            r"index",
            r"catalogue",
            r"≈ìuvres",
            r"plates?",
            r"figures?"
        ]
        
        # Patterns pour d√©tecter les num√©ros d'≈ìuvres dans les sommaires
        self.artwork_number_patterns = [
            r"(\d+)\s*[\.\)]\s*",  # "1. " ou "1) "
            r"n[o¬∞]?\s*(\d+)",     # "n¬∞ 1" ou "no 1"
            r"plate\s*(\d+)",      # "plate 1"
            r"fig\.?\s*(\d+)",     # "fig. 1"
            r"(\d+)\s*[‚Äì-]\s*",    # "1 - " ou "1 ‚Äì "
        ]
    
    def _check_mistral_availability(self) -> bool:
        """V√©rifie si Mistral est disponible via Ollama"""
        try:
            # V√©rifier si Ollama est en cours d'ex√©cution
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get('models', [])
                model_names = [model['name'] for model in models]
                
                # Chercher un mod√®le Mistral
                mistral_models = [name for name in model_names if 'mistral' in name.lower()]
                if mistral_models:
                    logger.info(f"‚úÖ Mistral local disponible: {mistral_models[0]}")
                    self.mistral_model = mistral_models[0]  # Utiliser le premier mod√®le Mistral trouv√©
                    return True
                else:
                    logger.warning("‚ö†Ô∏è Ollama disponible mais aucun mod√®le Mistral trouv√©")
                    logger.info("üí° Pour installer Mistral: ollama pull mistral")
                    return False
            else:
                logger.warning(f"‚ö†Ô∏è Erreur Ollama: {response.status_code}")
                return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Ollama non disponible: {e}")
            logger.info("üí° Pour installer Ollama: https://ollama.ai/")
            return False
    
    def _query_mistral(self, prompt: str, image_base64: str = None) -> Optional[str]:
        """Interroge le mod√®le Mistral via Ollama"""
        if not self.mistral_enabled:
            return None
        
        try:
            # Ollama utilise un format diff√©rent
            payload = {
                "model": self.mistral_model,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": 0.1,
                    "num_predict": 2000
                }
            }
            
            # Si une image est fournie, l'ajouter (Ollama supporte les images)
            if image_base64:
                payload["images"] = [image_base64]
            
            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json=payload,
                timeout=60  # Plus de temps pour les mod√®les locaux
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get('response', '').strip()
            else:
                logger.error(f"Erreur Ollama Mistral: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"Erreur requ√™te Ollama Mistral: {e}")
            return None
    
    def detect_summary_page(self, page_text: str) -> bool:
        """D√©tecte si une page contient un sommaire"""
        page_text_lower = page_text.lower()
        
        # V√©rifier les patterns de sommaire
        for pattern in self.summary_patterns:
            if re.search(pattern, page_text_lower):
                return True
        
        # V√©rifier la pr√©sence de num√©ros suivis de texte (caract√©ristique des sommaires)
        number_text_lines = 0
        lines = page_text.split('\n')
        
        for line in lines:
            line = line.strip()
            if len(line) > 10:  # Ligne suffisamment longue
                # V√©rifier si la ligne commence par un num√©ro suivi de texte
                for pattern in self.artwork_number_patterns:
                    if re.match(pattern, line):
                        number_text_lines += 1
                        break
        
        # Si plus de 3 lignes avec num√©ro + texte, probablement un sommaire
        return number_text_lines >= 3
    
    def extract_artwork_entries(self, page_text: str) -> List[Dict]:
        """Extrait les entr√©es d'≈ìuvres du sommaire"""
        entries = []
        lines = page_text.split('\n')
        
        for line_num, line in enumerate(lines):
            line = line.strip()
            if len(line) < 5:  # Ignorer les lignes trop courtes
                continue
            
            # Chercher un num√©ro d'≈ìuvre au d√©but de la ligne
            artwork_number = None
            for pattern in self.artwork_number_patterns:
                match = re.match(pattern, line)
                if match:
                    artwork_number = int(match.group(1))
                    break
            
            if artwork_number:
                # Extraire le texte apr√®s le num√©ro
                text_after_number = re.sub(r'^\d+[\.\)\s]*', '', line).strip()
                
                if text_after_number:
                    entries.append({
                        'line_number': line_num + 1,
                        'artwork_number': artwork_number,
                        'raw_text': text_after_number,
                        'full_line': line
                    })
        
        return entries
    
    def analyze_artwork_entry(self, entry: Dict, page_image: np.ndarray = None) -> Dict:
        """Analyse une entr√©e d'≈ìuvre avec l'aide de Mistral"""
        artwork_number = entry['artwork_number']
        raw_text = entry['raw_text']
        
        # Prompt pour Mistral
        prompt = f"""Analyse ce texte d'une entr√©e de catalogue d'art et extrais les informations structur√©es.

Num√©ro d'≈ìuvre: {artwork_number}
Texte brut: "{raw_text}"

Extrais et structure les informations suivantes au format JSON:
{{
    "artist_name": "Nom de l'artiste",
    "title": "Titre de l'≈ìuvre",
    "medium": "Technique utilis√©e (huile sur toile, etc.)",
    "size": [largeur, hauteur],
    "size_unit": "cm ou in",
    "execution_year": ann√©e,
    "signature": true/false,
    "description": "Description compl√®te",
    "provenance": ["Provenance 1", "Provenance 2"],
    "literature": ["R√©f√©rence litt√©raire 1"],
    "exhibition": ["Exposition 1"],
    "confidence": 0.0-1.0
}}

R√®gles:
- Si une information n'est pas claire, utilise null
- Pour les dimensions, extrais les nombres et l'unit√©
- Pour l'ann√©e, cherche 4 chiffres cons√©cutifs
- Pour la signature, cherche "sign√©", "signed", "sig."
- Structure le JSON proprement
- √âvalue la confiance de l'extraction (0.0-1.0)

R√©ponds UNIQUEMENT avec le JSON, sans autre texte."""

        # Si une image est fournie, l'utiliser pour l'analyse
        image_base64 = None
        if page_image is not None:
            try:
                _, buffer = cv2.imencode('.jpg', page_image)
                image_base64 = buffer.tobytes().decode('base64')
            except:
                pass
        
        # Interroger Mistral
        mistral_response = self._query_mistral(prompt, image_base64)
        
        if mistral_response:
            try:
                # Parser la r√©ponse JSON
                structured_data = json.loads(mistral_response)
                
                # Ajouter les m√©tadonn√©es
                structured_data['artwork_number'] = artwork_number
                structured_data['raw_text'] = raw_text
                structured_data['line_number'] = entry['line_number']
                structured_data['extraction_method'] = 'mistral'
                
                return structured_data
                
            except json.JSONDecodeError as e:
                logger.error(f"Erreur parsing JSON Mistral: {e}")
                logger.error(f"R√©ponse re√ßue: {mistral_response}")
        
        # Fallback: extraction basique sans IA
        return self._extract_basic_info(entry)
    
    def _extract_basic_info(self, entry: Dict) -> Dict:
        """Extraction basique sans IA (fallback)"""
        raw_text = entry['raw_text']
        
        # Extraction basique avec regex
        artist_name = None
        title = None
        medium = None
        size = None
        size_unit = None
        execution_year = None
        signature = False
        
        # Chercher l'artiste (g√©n√©ralement au d√©but)
        artist_patterns = [
            r"^([A-Z][a-z]+ [A-Z][a-z]+)",  # "Nom Pr√©nom"
            r"^([A-Z][a-z]+)",  # "Nom"
        ]
        
        for pattern in artist_patterns:
            match = re.search(pattern, raw_text)
            if match:
                artist_name = match.group(1)
                break
        
        # Chercher le titre (apr√®s l'artiste, avant la virgule)
        if artist_name:
            title_match = re.search(rf"{re.escape(artist_name)},\s*([^,]+)", raw_text)
            if title_match:
                title = title_match.group(1).strip()
        
        # Chercher les dimensions
        size_patterns = [
            r"(\d+(?:\.\d+)?)\s*[√óx]\s*(\d+(?:\.\d+)?)\s*(cm|in|m)",  # "100 x 80 cm"
            r"(\d+(?:\.\d+)?)\s*[√óx]\s*(\d+(?:\.\d+)?)\s*(centim√®tres|inches|m√®tres)",  # "100 x 80 centim√®tres"
        ]
        
        for pattern in size_patterns:
            match = re.search(pattern, raw_text, re.IGNORECASE)
            if match:
                size = [float(match.group(1)), float(match.group(2))]
                size_unit = match.group(3).lower()
                if size_unit in ['centim√®tres', 'centim√®tre']:
                    size_unit = 'cm'
                elif size_unit in ['inches', 'inch']:
                    size_unit = 'in'
                elif size_unit in ['m√®tres', 'm√®tre']:
                    size_unit = 'm'
                break
        
        # Chercher l'ann√©e
        year_match = re.search(r'\b(19|20)\d{2}\b', raw_text)
        if year_match:
            execution_year = int(year_match.group(0))
        
        # Chercher la signature
        signature_patterns = [r'sign√©', r'signed', r'sig\.', r'signature']
        for pattern in signature_patterns:
            if re.search(pattern, raw_text, re.IGNORECASE):
                signature = True
                break
        
        return {
            'artwork_number': entry['artwork_number'],
            'raw_text': raw_text,
            'line_number': entry['line_number'],
            'artist_name': artist_name,
            'title': title,
            'medium': medium,
            'size': size,
            'size_unit': size_unit,
            'execution_year': execution_year,
            'signature': signature,
            'description': raw_text,
            'provenance': [],
            'literature': [],
            'exhibition': [],
            'confidence': 0.3,  # Faible confiance pour extraction basique
            'extraction_method': 'regex_fallback'
        }
    
    def analyze_summary_page(self, page_text: str, page_image: np.ndarray = None) -> Dict:
        """Analyse compl√®te d'une page de sommaire"""
        logger.info("üîç Analyse du sommaire...")
        
        # D√©tecter si c'est un sommaire
        is_summary = self.detect_summary_page(page_text)
        if not is_summary:
            return {
                'is_summary': False,
                'message': 'Page ne semble pas √™tre un sommaire'
            }
        
        # Extraire les entr√©es d'≈ìuvres
        entries = self.extract_artwork_entries(page_text)
        logger.info(f"üìã {len(entries)} entr√©es d'≈ìuvres trouv√©es")
        
        if not entries:
            return {
                'is_summary': True,
                'entries': [],
                'message': 'Aucune entr√©e d\'≈ìuvre trouv√©e'
            }
        
        # Analyser chaque entr√©e
        analyzed_entries = []
        for entry in entries:
            logger.info(f"  üîç Analyse entr√©e {entry['artwork_number']}...")
            analyzed_entry = self.analyze_artwork_entry(entry, page_image)
            analyzed_entries.append(analyzed_entry)
        
        return {
            'is_summary': True,
            'entries': analyzed_entries,
            'total_entries': len(analyzed_entries),
            'mistral_enabled': self.mistral_enabled,
            'extraction_method': 'mistral' if self.mistral_enabled else 'regex_fallback'
        }
    
    def create_artwork_json(self, analyzed_entry: Dict) -> str:
        """Cr√©e un JSON structur√© pour une ≈ìuvre"""
        # Cr√©er un ID unique bas√© sur le num√©ro d'≈ìuvre
        artwork_id = f"artwork-{analyzed_entry['artwork_number']:03d}"
        
        # Structure finale
        artwork_data = {
            "artist_name": analyzed_entry.get('artist_name'),
            "title": analyzed_entry.get('title'),
            "id": artwork_id,
            "image_url": None,  # Sera rempli plus tard
            "size": analyzed_entry.get('size'),
            "size_unit": analyzed_entry.get('size_unit'),
            "medium": analyzed_entry.get('medium'),
            "signature": analyzed_entry.get('signature'),
            "execution_year": analyzed_entry.get('execution_year'),
            "description": analyzed_entry.get('description'),
            "provenance": analyzed_entry.get('provenance', []),
            "literature": analyzed_entry.get('literature', []),
            "exhibition": analyzed_entry.get('exhibition', []),
            "metadata": {
                "artwork_number": analyzed_entry['artwork_number'],
                "raw_text": analyzed_entry['raw_text'],
                "line_number": analyzed_entry['line_number'],
                "extraction_method": analyzed_entry.get('extraction_method', 'unknown'),
                "confidence": analyzed_entry.get('confidence', 0.0)
            }
        }
        
        return json.dumps(artwork_data, indent=2, ensure_ascii=False)
    
    def save_summary_analysis(self, analysis: Dict, output_path: str):
        """Sauvegarde l'analyse du sommaire"""
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(analysis, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üíæ Analyse du sommaire sauvegard√©e: {output_path}")
        
        # Cr√©er aussi des fichiers individuels pour chaque ≈ìuvre
        if analysis.get('is_summary') and analysis.get('entries'):
            base_dir = os.path.dirname(output_path)
            artworks_dir = os.path.join(base_dir, "artworks")
            os.makedirs(artworks_dir, exist_ok=True)
            
            for entry in analysis['entries']:
                artwork_json = self.create_artwork_json(entry)
                artwork_file = os.path.join(artworks_dir, f"artwork_{entry['artwork_number']:03d}.json")
                
                with open(artwork_file, 'w', encoding='utf-8') as f:
                    f.write(artwork_json)
                
                logger.info(f"  üíæ ≈íuvre {entry['artwork_number']} sauvegard√©e: {artwork_file}")
